@page "/Estudiante/Delete/{EstudianteId:int}"

@inject EstudianteService estudianteService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Delete</PageTitle>
<div class="container">
    <div class="shadow-lg">
        @*Header*@
        <div class="card-header text-center">
            <h3><strong>Eliminar Estudiante</strong></h3>
        </div>
        @*Body*@
        <div class="card-body">
            <div class="text-center">
                <h4><strong>¿Desea Eliminar este estudiante?</strong></h4>
            </div>
            <ul class="mt-5">
                <li><strong>Id: </strong>@Estudiante.EstudianteId</li>
                <li><strong>Nombre: </strong>@Estudiante.Nombre</li>
                <li><strong>Matricula: </strong>@Estudiante.Matricula</li>
                <li><strong>Carrera: </strong>@Estudiante.Carrera</li>
            </ul>
        </div>
        @*Footer*@
        <div class="card-footer text-center">
            <button type="button" class="btn btn-primary" @onclick="Volver">Volver</button>
            <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
        </div>
    </div>
</div>

@Mensaje

@code {
    [Parameter]
    public int EstudianteId { get; set; }

    public Estudiantes Estudiante { get; set; } = new Estudiantes();
    public string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync() {
        Estudiante = await estudianteService.Buscar(EstudianteId);
    }

    private async Task Eliminar() {
        var eliminado = await estudianteService.Eliminar(Estudiante);

        if (eliminado)
            Mensaje = $"El estudiante {Estudiante.Nombre} ha sido eliminado correctamente";
        else
            Mensaje = "No se ha podido eliminar el estudiante";
    }

    public void Volver() {
        navigationManager.NavigateTo("/Estudiante/Index");
    }
}
