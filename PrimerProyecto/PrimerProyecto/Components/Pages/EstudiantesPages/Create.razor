@page "/Estudiante/Create"

@inject EstudianteService estudianteService
@inject DiaSemanaService diaSemanaService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

@* <Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" /> *@

<EditForm Model="Estudiante" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    @*Formulario*@
    <div class="container">
        <div class="shadow-lg">
            @*Header*@
            <div class="card-header text-center">
                <h3><strong>Crear Estudiante</strong></h3>
            </div>
            @*Body*@
            <div class="card-body">
                <div class="row">
                    @*Id*@
                    <div class="col-1">
                        <label class="form-label"><strong>EstudianteId</strong></label>
                        <InputNumber class="form-control" @bind-Value="Estudiante.EstudianteId" readonly></InputNumber>
                    </div>
                    @*Nombre*@
                    <div class="col-3 ms-5">
                        <label class="form-label"><strong>Nombre</strong></label>
                        <InputText class="form-control" @bind-Value="Estudiante.Nombre"></InputText>
                        <ValidationMessage For="(()=> Estudiante.Nombre)" />
                    </div>
                    @*Matricula*@
                    <div class="col-3 ms-5">
                        <label class="form-label"><strong>Matr&iacute;cula</strong></label>
                        <InputText class="form-control" @bind-Value="Estudiante.Matricula"></InputText>
                        <ValidationMessage For="(()=> Estudiante.Matricula)" />
                    </div>
                    @*Carrea*@
                    <div class="col-3 ms-5">
                        <label class="form-label"><strong>Carrera</strong></label>
                        <InputText class="form-control" @bind-Value="Estudiante.Carrera"></InputText>
                        <ValidationMessage For="(()=> Estudiante.Carrera)" />
                    </div>
                </div>
               @*Select de Dias*@
               <div class="col-4 mt-3">
                   <label class="form-label">D&iacute;asSemana</label>
                   <InputSelect class="form-select" @bind-Value="Estudiante.DiaId">
                       <option value="0" selected disabled>Selecciona un dia de la semana</option>
                        @foreach(var dia in ListaDias) {
                            <option value="@dia.DiasSemanasId">@dia.Dias</option>
                        }
                    </InputSelect>
               </div>
            </div>
            @*Footer*@
            <div class="card-footer text-center">
                <button type="button" class="btn btn-primary" @onclick="Volver">Volver</button>
                <button type="submit" class="btn btn-success">Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@Mensaje



@code {
    public Estudiantes Estudiante { get; set; } = new Estudiantes();
    public List<DiasSemanas> ListaDias { get; set; } = new List<DiasSemanas>();

    private List<ToastMessage> notificacion = new List<ToastMessage>();
    public string Mensaje { get; set; }

    protected override async Task OnInitializedAsync() {
        ListaDias = await diaSemanaService.Listar(d => true);
    }

    // private void MostrarMensaje(ToastType toastType, string mensaje) {
    //     notificacion.Add(CreateToastMessage(toastType, mensaje));
    // }

    // private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
    // => new ToastMessage {
    //         Type = toastType,
    //         Title = "Notificación",
    //         HelpText = $"{DateTime.Now}",
    //         Message = mensaje,
    // };

    public async Task Guardar() {
        if(await Validar()) {
            Mensaje = "Ya existe un estudiante con esta matricula o nombre";
            return;
        }

        var crear = await estudianteService.Guardar(Estudiante);

        if (crear)
            // Mensaje = "Se ha creado correctamente";
            Mensaje = "Se ha creado correctamente";
        else
            Mensaje = "No Se ha creado correctamente";
    }

    private async Task<bool> Validar() {
        var existe = await estudianteService.ExisteEstudiante(Estudiante.EstudianteId, Estudiante.Nombre, Estudiante.Matricula);
        return existe;
    }

    public void Volver() {
        navigationManager.NavigateTo("/Estudiante/Index");
    }
}
